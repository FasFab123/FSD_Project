@page "/DatingAppUsers/View/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager


<head>
    <style>
        table {
            color: white;
        }

        th, td {
            color: white;
        }
    </style>
</head>

<h1 class="card-title" style="text-align:center;font-family: 'Lucida Calligraphy',cursive">User Profile</h1>

<EditForm Model="@datingappuser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Profile Picture: </label>
            <div>
                <img src="@datingappuser.profile_picture_url" style="width: 250px; height: 250px;">
                <br />
            </div>
        </div>
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@datingappuser.Username" class="form-control" />
                <ValidationMessage For="@(()=> datingappuser.Username)" />
            </div>
        </div>
        <div class="form-group">
            <label>Age: </label>
            <div>
                <InputNumber @bind-Value="@datingappuser.Age" class="form-control" />
                <ValidationMessage For="@(()=> datingappuser.Age)" />
            </div>
        </div>
        <div class="form-group">
            <label>Gender: </label>
            <div>
                <InputSelect @bind-Value="@datingappuser.Gender" class="form-control">
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
                <ValidationMessage For="@(()=> datingappuser.Gender)" />
            </div>
        </div>
    </fieldset>
</EditForm>
<br />
<h3 class="card-title" style="text-align:center;font-family: 'Lucida Calligraphy',cursive">Biography</h3>

@if (UserProfiles == null)
{
    <div class="alert alert-info">No Biography...</div>
}
else
{
    <table class=" table table-responsive">
        <thead>
            <tr>
                <th>Description</th>
                <th>Hobby</th>
                <th>Favourite Animal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var userprofile in UserProfiles)
            {
                <tr>
                    <td>@userprofile.DatingAppUserDescription</td>
                    <td>@userprofile.Hobby</td>
                    <td>@userprofile.FavouriteAnimal</td>
                </tr>
            }
        </tbody>

    </table>
}

<h3 class="card-title" style="text-align:center;font-family: 'Lucida Calligraphy',cursive">Matches</h3>

@if (Matches == null)
{
    <div class="alert alert-info">No Matches...</div>
}
else
{
    <table class=" table table-responsive">
        <thead>
            <tr>
                <th>Profile Picture</th>
                <th>Initiator</th>
                <th>Reciever</th>
            </tr>
        </thead>
        <tbody>
                    @foreach (var match in Matches)
                    {
                        if (match.DatingAppUserInitiator.Id == id || match.DatingAppUserReciever.Id == id)
                        {
                            <tr>
                                <td><img src="@match.DatingAppUserInitiator.profile_picture_url" style="width: 100px; height: 100px;"/></td>
                                <td>@match.DatingAppUserInitiator.Username</td>
                            <td><img src="@match.DatingAppUserReciever.profile_picture_url" style="width: 100px; height: 100px;" /></td>
                                <td>@match.DatingAppUserReciever.Username</td>
                            </tr>
                        }
                    }
        </tbody>

    </table>
}
<br />
<BackToList Target="DatingAppUsers" />


@code {
    [Parameter] public int id { get; set; }
    [Parameter] public bool Disabled { get; set; } = true;
    DatingAppUser datingappuser = new DatingAppUser();
    private List<UserProfile>? UserProfiles;
    private List<Match>? Matches;

    protected async override Task OnParametersSetAsync()
    {
        datingappuser = await _client.GetFromJsonAsync<DatingAppUser>($"{Endpoints.DatingAppUsersEndpoint}/{id}");
        UserProfiles = await _client.GetFromJsonAsync<List<UserProfile>>($"{Endpoints.UserProfilesEndpoint}");
        Matches = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchesEndpoint}");
    }
}
